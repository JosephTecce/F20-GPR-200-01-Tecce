// Code Bellow was written and commented by: Joseph Tecce
// Functions templates calcViewport, calcRay, calcColor, mainImage were provided by: Proffessor Buckstein
// While attending class GPR-200-01 Introduction to Modern Graphics Programming At Champlain College
// Copyright laws are followed by ShaderToy
// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

#define IA 5.0
#define CA vec4(0.0, 0.0, 0.0, 0.0)

struct pointLightStr
{
    vec4 lCenter;
    vec4 lColor;
    float lIntensity;
};

struct sphereStr
{
    vec4 sCenter;
    float sRadius;
};

// Incharge of makeing vec4 -> vec3 or vec3 -> vec4

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}


// MATH CALUCULATIONS

float lengthSq(vec2 x)
{
    return dot(x, x);
}

// Instantiating Here
// vec3 will be used with asPoint to get rid of user error
bool initSphere(out sphereStr sphere, 
                in vec3 center, in float radius)
{
    sphere.sCenter = asPoint(center);
    // Making sure the radius is valid
    if(radius > 0.0)
    {
    	sphere.sRadius = radius;
        return true;
    }
    
    sphere.sRadius = 1.0;
    return false;
}

bool initLight(out pointLightStr light, in vec4 center, in vec4 color, in float intensity)
{
    //light.lCenter = asPoint(center);
    light.lCenter = center;
    light.lColor = color;
    light.lIntensity = intensity;
    
    return true;
}

// FUNCTIONS

// Gets light Normal form current light postion and sphere position
vec3 lightNormalCalc(pointLightStr currentLight, in vec3 spherePosition)
{ 
    vec3 bigL = normalize(currentLight.lCenter.xyz - spherePosition);
    return bigL;
}

float IDCalc(pointLightStr currentLight, in vec3 spherePosition, in vec3 sphereNormal)
{
    // Diffusion
    // Id = kd * Il (Diffusion)
    // Id = diffusion intensity
    // kd = diffuse coefficient -> kd = cos(0n,l)
    // Il = attenuated intensity
    
    // Diffusion Coefficent
    // Kd = max(0, N(normal) * L);
    vec3 bigL = normalize(currentLight.lCenter.xyz - spherePosition);
       
    float kD = max(0.0, ((sphereNormal.x * bigL.x) + 
                         (sphereNormal.y * bigL.y) + 
                         (sphereNormal.z * bigL.z)));
        
    // Distance from sphere point to light center
    float d = distance(spherePosition.xyz, currentLight.lCenter.xyz);
       
    // Attenuation Formula
    // I'L = 1 / (1 + d/light.lIntensity + pow(d) / pow(light.lIntensity));
    float IL = 1.0 / (1.0 + d / currentLight.lIntensity + 
                     (d * d) / (currentLight.lIntensity * currentLight.lIntensity));
        
    // Diffusion Formula
    float ID = kD * IL;
    
    return ID;
}

float ISCalc(in vec4 rayOrigin, in vec3 spherePosition, 
             in vec3 sphereNormal, in vec3 bigL)
{
    // Phong Reflectance
    // IS = kaS
    // IS = specular Intensity
    // kS = specual coeffiecient
    // a = highlight exponient
        
    // Specular Coefficient
    // bigV = normal of view vector (ray Origin) and sphere position
    // R = reflected light
    	    
    // V = normalize(rayOrigin.xyz - spherePosition);
    vec3 bigV = normalize(rayOrigin.xyz - spherePosition);
       
    // Blinn-Phong reflectance
    // H = normalize(bigL + bigV);
    vec3 bigH = normalize(bigL + bigV);
       
    //reflect(-bigL, sphereNormal);
    vec3 R = -bigL - 2.0 * dot(sphereNormal, -bigL);
        
    float kS = max(0.0, ((sphereNormal.x * bigH.x) + 
                         (sphereNormal.y * bigH.y) + 
                         (sphereNormal.z * bigH.z)));
        
    // Gets a for powering to the kS
    float a = 64.0;
    a *= 4.0;
        
    float IS = pow(kS, a);
   
    return IS;
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
	
    // SCENE
    sphereStr sphere;
    pointLightStr lightList[4];
    initSphere(sphere, vec3(0.0, 0.0, -4.0), 0.5);
    initLight(lightList[0], vec4(0.5, 0.5, -3.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0), 4.0);
    initLight(lightList[1], vec4(-2.5, -2.5, -3.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0), 4.0);
    initLight(lightList[2], vec4(-8.0, 6.0, -5.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0), 4.0);
    initLight(lightList[3], vec4(3.2, -9.0, -5.0, 1.0), vec4(1.0, 1.0, 1.0, 1.0), 4.0);
    
    // testing procedual sphere (can make funciton for this math later)
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.sCenter.xy;
    
    float lSq = lengthSq(dp.xy) , 
        rSq = sphere.sRadius * sphere.sRadius;

    //if (length(dp.xy) <= sphere.sRadius)
    if(lSq <= rSq)
    {        
        //return vec4(0.0, 1.0, 1.0, 1.0);
        // Unoptimized way
        // dx, dy, r (sqr these)
        // sq = sqrt dz, dx, dy = dp.x dp.y dp.z
        // This formula is = dz_sq = r_sq - (dx_sq + dy_sq) 
        //dp.z = sphere.sRadius * sphere.sRadius - 
        //    (dp.x * dp.x + dp.y * dp.y); // This is actually dp_sq
        // Optimized way
        dp.z = rSq - lSq;
        
        // Equation position_frag.xyz = (center_circle) + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 spherePosition = sphere.sCenter.xyz + 
            vec3(dp.x, dp.y, sqrt(dp.z));
        
        //normalize(spherePosition - sphere.sCenter.xyz);
        vec3 sphereNormal = (spherePosition - sphere.sCenter.xyz) / sphere.sRadius;

        vec4 sphereColor = vec4(sphereNormal * 0.5 + 0.5, 1.0);
        
        // Lights Diffusion Intensity
        float light1_ID = IDCalc(lightList[0], spherePosition, sphereNormal);
        float light2_ID = IDCalc(lightList[1], spherePosition, sphereNormal);
        float light3_ID = IDCalc(lightList[2], spherePosition, sphereNormal);
        float light4_ID = IDCalc(lightList[3], spherePosition, sphereNormal);
        
        // Gettting Light Normals
        vec3 light1_BigL = lightNormalCalc(lightList[0], spherePosition);
        vec3 light2_BigL = lightNormalCalc(lightList[1], spherePosition);
        vec3 light3_BigL = lightNormalCalc(lightList[2], spherePosition);
        vec3 light4_BigL = lightNormalCalc(lightList[3], spherePosition);
        
        // Lights Blinn-Phong Reflectance
        float light1_IS = ISCalc(rayOrigin, spherePosition, sphereNormal, light1_BigL);
        float light2_IS = ISCalc(rayOrigin, spherePosition, sphereNormal, light2_BigL);
        float light3_IS = ISCalc(rayOrigin, spherePosition, sphereNormal, light3_BigL);
        float light4_IS = ISCalc(rayOrigin, spherePosition, sphereNormal, light4_BigL);
        
        // Calculating light Diffusion and Blinn-Phong sums
        float IDTotal = light1_ID + light2_ID + light3_ID + light4_ID;
        float ISTotal = light1_IS + light2_IS + light3_IS + light4_IS; 
        
    	// Final Coloring Sphere and light
    	// Just diffusion (C = ID * CD * CL)
    	// vec4 color = ID * sphereColor * light.lColor;
    	// Phong (C = IA * CA + (ID'sum' * CD + IS'sum' * CS) * CL'cur')
        //for(int i = 0; i < 3; i++)
        for(int i = 3; i >= 0; --i)
        {
            vec4 color =  IA * CA + ((IDTotal * sphereColor) + 
    	                         (ISTotal * sphereColor)) * lightList[i].lColor;
            
            return color;
        }       
    }

	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0); // Actual background for project
    //return vec4(0.5); // Light testing background
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor = calcColor(rayDirection, rayOrigin);
}