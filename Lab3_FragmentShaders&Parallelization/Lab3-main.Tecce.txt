// Code Bellow was written and commented by: Joseph Tecce
// Functions templates calcViewport, calcRay, calcColor, mainImage were provided by: Proffessor Buckstein
// While attending class GPR-200-01 Introduction to Modern Graphics Programming
// At Champlain College
// Copyright provided by: ShaderToy
// Other Sources used: https://www.shadertoy.com/view/tlB3D3
// Locations specified in code


// *********IMPORTANT**********
// vec3 in book = vec4 in shadertoy
// Don't do everything at once, just keep testing along the way
// Try to multiply instead of devide when possible

// *******STRUCTS*******
// Starting point for when a ray hits
struct hitRecord
{
    vec4 p;
    vec4 normal;
    float t;
};

// Starting point for spheres
struct sphereStruct
{
    vec4 center;
    float radius;
};
    
// *******CALCULATIONS FUNCTIONS*******
// Gets square root of vec4's (quicker then normal)
float lengthSqrt(in vec4 e)
{
    return dot(e, e);
}

// calculates length of a vector
vec4 unitVector(in vec4 v)
{
    return v / length(v);
}

// Not All Origininal Work for calcViewPort!
// Got some insperation from ShaderToy user fhecht
// Source: https://www.shadertoy.com/view/tlB3D3
// "Random" Number Generator
float numRand(vec2 uv)
{
    // Commonly used random number generator on ShaderToy
    return fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 437578.5453);
}

// *******Functions*******
vec4 setFaceNormal(in vec4 rayDirection, in vec4 rayOrigin, in vec4 outwardNormal)
{
    // Normalizing the face the ray is hitting
    bool frontFace = dot(rayDirection, outwardNormal) < 0.0;
    return frontFace ? outwardNormal : -outwardNormal;
}

bool sphereHit (vec4 rDir, vec4 rOrg, float tMin, float tMax, sphereStruct curSphere, inout hitRecord rec)
{
    // Simplified method of sphere calculations
    // Calculating if it is a sphere
    vec4 oc = rOrg - curSphere.center;
    float a = lengthSqrt(rDir);
    float half_b = dot(oc, rDir);
    float c = lengthSqrt(oc) - curSphere.radius * curSphere.radius;
    float discriminant = half_b * half_b - a * c;
    
    // Checking if the ray shot is inside a sphere
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        
        //Checking rays and normalzing them
        float temp = (-half_b - root) / a;
        if(temp <= tMax && temp >= tMin)
        {
            rec.t = temp;
            rec.p = rOrg + rec.t * rDir;
            vec4 outwardNormal = (rec.p - curSphere.center) / curSphere.radius;
            rec.normal = setFaceNormal(rDir, rOrg, outwardNormal);
            return true;
        }
        
        temp = (-half_b + root) / a;
        if(temp <= tMax && temp >= tMin)
        {
            rec.t = temp;
            rec.p = rOrg + rec.t * rDir;
            vec4 outwardNormal = (rec.p - curSphere.center) / curSphere.radius;
            rec.normal = setFaceNormal(rDir, rOrg, outwardNormal);
            return true;
        }
    }
    
    return false;
}

// Not All Origininal Work for calcViewPort!
// Got some insperation from ShaderToy user fhecht
// Source: https://www.shadertoy.com/view/tlB3D3
// Specifically the antialise random number part

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv += fragCoord.xy * resolutionInv;
    
    //Randomizer for antialize
    float rand1 = numRand(uv * 0.123);
    float rand2 = numRand(uv * 0.456);
    
    //Putting random pixels into the resoluiton
    uv += vec2(rand1, rand2) / iResolution.xy;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}


// Not All Origininal Work for calcColor!
// Got some insperation from ShaderToy user fhecht
// Source: https://www.shadertoy.com/view/tlB3D3

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(vec4 rDir, vec4 rOrg, sphereStruct sph1, sphereStruct sph2)
{
    //Setting a max and a min of were a sphere can be
    float tMax = 1e20; //"infinity"
    float tMin = 0.0;
    
    hitRecord rec;
    
    //Checking if is hitting an avalable sphere
    if(sphereHit(rDir, rOrg, tMin, tMax, sph1, rec))
    {
        // Returns normal color
        return (rec.normal + 1.0) / 2.0;
    }
    if(sphereHit(rDir, rOrg, tMin, tMax, sph2, rec))
    {
        // Returns normal color
        return (rec.normal + 1.0) / 2.0;
    }

    // Making Background Gradiant
    vec4 unitDir = normalize(rDir);
    float t = (unitDir.y + 1.0) / 2.0;
    return (1.0 - t) * vec4(1.0, 1.0, 1.0, 1.0) + t * vec4(0.5, 0.7, 1.0, 1.0);
}


// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    
    //World
    sphereStruct sph1 = sphereStruct(vec4(0.0, 0.0, -1.0, 1.0), 0.5);
    sphereStruct sph2 = sphereStruct(vec4(0.0, -100.5, -1.0, 1.0), 100.0);
    
    // color
    fragColor = calcColor(rayDirection, rayOrigin, sph1, sph2);
    
    
    //Randomizer for antialize
    //float rand1 = numRand(uv) / float(iResolution.xy);
    //float rand2 = numRand(uv * 0.456);
    
    //uv += rand1; //vec2(rand1, rand2) / iResolution.xy;

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
    
    
    
    // EFFICIENCY TIPS
    //float a = fragCoord.x + 2.0; // single parallel operation
    
    // A conditional 
    // Even if if statmenet is false will still read if statment and role back
    // Try to use if statment as little as possible they are evil
    // Tip to optimize them put most likly first so little role back
    //if (a < 0.0)
    //{  
    //}
    //else
    //{ 
    //}
   
    // Don't need for project but good practice to think and possible implement
    // Antialiasing tips (going from least efficent to most efficent)
    //int numSample = 10;
    //int i;
    // **(Unknown number of iterations)**
    //for (i = 0; i < numSamples; i++)
    //for(i = 0; i < numSamples; ++i) // ++i is greater then i++
    //for(i = numSamples - 1; i >= 0; --i) // >= is faster then <
    //{ 
    //	 resutl += vec4(float(i));
    //}
    
    // Prenent out of main dummy funciton
    //vec4 addColor(in int index)
    //{
        // do something important blah blah
        //return vec4(float(index))
    //}
    
    // ******** IMPORTANT *********
    // helps with only having to type things one time
    //float lengthSq(in vec2 x)
    //{
        //return dot(x, x);
    //}
    
    //float lengthSq(in vec3 x)
    //{
        //return dot(x, x);
    //}
    
    //float lengthSq(in vec4 x)
    //{
        //return dot(x, x);
    //}
    
    // Back in main **(Know number of iterations)**
    // This one job is just what for loop does behind the sences just more effictant 
    // Same thing as for loop but cuts it out becasue we know how many times it will be called
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    //result += addColor(++i);
    
    // ****EXAMPLES****
    //float aSq = a * a; // pow(a, 2.0); Same thing
    //float aCu = a * aSq; // Way more effecive
    //float a4 = aSq * aSq // More effective 
    
    // The Actual more effective way
    //a *= a; // 'a' Squared
    //a *= a; // original ^ 4
    //a *= a; // original ^ 8
    //Will keep increaseing by incraments of 2
    
    //float lengthSq(rayDirection);
    
    //vec2 s = rayDirection.xy;
    //vec2 s = vec2(rayDirection.x, rayDirection.y);
    //vec2 s = vec2(rayDirection.y, rayDirection.x); //Not swizzling
    //vec2 s = rayDirection.yx; //swizzling
    
    //more swizzling
    //vec3 s3 = rayDirection.yxz; //All different can be assignable and changed
    //vec3 s3 = rayDirection.zzx; //Duplicates not writable
    //vec3 s3 = rayDirection.yyy;
    //vec3 s3 = rayDirection.xxx;
    //vec3 s3 = rayDirection.xyy;
    //rayDirection.yxz = rayDirection.zxy; //can be changed around like so
    
    //vec4 s4 = lengthSq.xxxx; // can swizzle with floats only like this tho
    
}


// Notes taken in Class
/*
// Imagine 1 call per pixel just parallel
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
    
    // A way to check the version of GLSL being used
    //if(__VERSION__ == 300)
        //fragColor = vec4(1.0);
}
*/

/*
#version 300 es

// ***All of this is just what shader toy is doing in the background to make everything work***

// inputs (later)
// uniforms (see above)

// output (basically saying first of a set)
layout (location = 0) out vec4 fragColor;

// shadertoy
void mainImage(out vec4 fragColor, in vec2 fragCoord);

// Actual Fragment Shader main
void main()
{
	// shadertoy
	mainImage(fragColor, fragCoord.xy);
}
*/